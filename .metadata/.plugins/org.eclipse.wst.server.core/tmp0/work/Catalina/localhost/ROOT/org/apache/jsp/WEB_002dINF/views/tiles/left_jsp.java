/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2019-05-12 03:50:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.tiles;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class left_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("* {\n");
      out.write("    padding: 0;\n");
      out.write("    margin: 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("body {\n");
      out.write("    font-size: 9pt;\n");
      out.write("    margin: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#accordionMenu1 {\n");
      out.write("    margin: 0 auto;\n");
      out.write("    width: 300px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu {\n");
      out.write("    position: relative;\n");
      out.write("    list-style: none;\n");
      out.write("    border: 4px solid #eee;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu >li {\n");
      out.write("    overflow: hidden;\n");
      out.write("    border: 1px solid #000;\n");
      out.write("    cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li .main-title {\n");
      out.write("    background-color: #fff;\n");
      out.write("    padding: 10px;\n");
      out.write("    vertical-align: middle;\n");
      out.write("    position: relative;\n");
      out.write("    z-index: 100;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li .main-title a {\n");
      out.write("    display: inline-block;\n");
      out.write("    height: 20px;\n");
      out.write("    line-height: 20px;\n");
      out.write("    text-align: center;\n");
      out.write("    vertical-align: middle;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li .main-title .folder {\n");
      out.write("    display: inline-block;\n");
      out.write("    width: 20px;\n");
      out.write("    height: 20px;\n");
      out.write("    overflow: hidden;\n");
      out.write("    line-height: 20px;\n");
      out.write("    text-align: center;\n");
      out.write("    vertical-align: middle;\n");
      out.write("    margin-right: 5px;\n");
      out.write("    text-indent: -100px;\n");
      out.write("    background-image: url(\"http://cfile3.uf.tistory.com/image/24185E335762538E2AE110\");\n");
      out.write("    /* 기본은 .close */\n");
      out.write("    background-position: 0 -40px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li .main-title .folder.empty {\n");
      out.write("    background-position: 0 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li .main-title .folder.open {\n");
      out.write("    background-position: 0 -20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li .main-title .folder.close {\n");
      out.write("    background-position: 0 -40px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li ul.sub {\n");
      out.write("    list-style: none;\n");
      out.write("    margin-left: 30px;\n");
      out.write("    margin-bottom: 20px;\n");
      out.write("    z-index: 90;\n");
      out.write("    position: relative;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li ul.sub.open {\n");
      out.write("    display: block;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li ul.sub.hide {\n");
      out.write("    display: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li ul.sub li {\n");
      out.write("    height: 20px;\n");
      out.write("    padding: 10px;\n");
      out.write("    line-height: 20px;\n");
      out.write("    vertical-align: middle;\n");
      out.write("    cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".acc-menu li ul.sub li.select {\n");
      out.write("    background-color: #bddeea;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script>\n");
      out.write("<script>\n");
      out.write("$(function() {\n");
      out.write("    // 인스턴스 생성\n");
      out.write("    var accordion = new AccordionMenu('.acc-menu');\n");
      out.write("    accordion.selectMenu(1, 1, true);\n");
      out.write("\n");
      out.write("    // 애니메이션 타입으로 0번째 메뉴 열기\n");
      out.write("    // accordion.openSubMenuAt(0, true);\n");
      out.write("\n");
      out.write("    // 즉시 2번째 메뉴 닫기\n");
      out.write("    // accordion.closeSubMenuAt(2, false);\n");
      out.write("\n");
      out.write("    accordion.$accordionMenu.on('open', function(e) {\n");
      out.write("        console.log('open', e.$target.find('.main-title a').text());\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    accordion.$accordionMenu.on('close', function(e) {\n");
      out.write("        console.log('close', e.$target.find('.main-title a').text());\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    accordion.$accordionMenu.on('selected', function(e) {\n");
      out.write("        var oldText = '없음';\n");
      out.write("\n");
      out.write("        if (e.$oldItem) {\n");
      out.write("            oldText = e.$oldItem.text();\n");
      out.write("        }\n");
      out.write("        console.log('select old = ', oldText + ', new = ' + e.$newItem.text());\n");
      out.write("    });\n");
      out.write("\n");
      out.write("});\n");
      out.write("\n");
      out.write("function AccordionMenu(selector) {\n");
      out.write("    // 프로퍼티 생성 및 초기화\n");
      out.write("    this.$accordionMenu = null; // 메뉴 랩퍼를 담을 변수\n");
      out.write("    this.$mainMenuItems = null; // 메인 메뉴아이템을 담을 변수\n");
      out.write("    this.$selectSubItem = null; // 선택할 서브 메뉴아이템을 담을 변수\n");
      out.write("\n");
      out.write("    this.init(selector);\n");
      out.write("    this.initSubMenuPanel();\n");
      out.write("    this._initEvent();\n");
      out.write("}\n");
      out.write("\n");
      out.write("AccordionMenu.prototype = {\n");
      out.write("    // 요소 초기화\n");
      out.write("    'init': function(selector) {\n");
      out.write("        this.$accordionMenu = $(selector);\n");
      out.write("        this.$mainMenuItems = this.$accordionMenu.children('li');\n");
      out.write("\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 서브 패널 초기화 - 초기 시작시 닫힌 상태로 만들기\n");
      out.write("    'initSubMenuPanel': function() {\n");
      out.write("        var _self = this;\n");
      out.write("        this.$mainMenuItems.each(function(index) {\n");
      out.write("            var $item = $(this),\n");
      out.write("                $subMenu = $item.find('.sub');\n");
      out.write("\n");
      out.write("            // 서브 메뉴가 없는 경우\n");
      out.write("            if (!$subMenu.length) {\n");
      out.write("                $item.attr('data-extension', 'empty');\n");
      out.write("            } else {\n");
      out.write("                if ($item.attr('data-extension') == 'open') {\n");
      out.write("                    _self.openSbuMenu($item);\n");
      out.write("                } else {\n");
      out.write("                    if ($item.attr('data-extension') == 'open') {\n");
      out.write("                        _self.openSbuMenu('$item', false);\n");
      out.write("                    } else {\n");
      out.write("                        _self.closeSubMenu($item, false);\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("        });\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 아이콘 상태 설정\n");
      out.write("    'setIconState': function($item, state) {\n");
      out.write("        var $folder = $item.find('.main-title .folder');\n");
      out.write("        // 기존 클래스를 모두 제거\n");
      out.write("        $folder.removeClass();\n");
      out.write("        $folder.addClass('folder ' + state);\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 이벤트 초기화\n");
      out.write("    '_initEvent': function() {\n");
      out.write("        var _self = this,\n");
      out.write("            $mainTitle = this.$mainMenuItems.find('.main-title'),\n");
      out.write("            $subPanelItem = this.$mainMenuItems.find('.sub li');\n");
      out.write("\n");
      out.write("        $mainTitle.on('click', function(e) {\n");
      out.write("            var $item = $(this).parent();\n");
      out.write("            _self._toggleSubMenuPanel($item);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        $subPanelItem.on('click', function(e) {\n");
      out.write("            var $this = $(this);\n");
      out.write("            _self.selectSubMenuItem($this)\n");
      out.write("        });\n");
      out.write("\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 서브 메뉴패널 열기 - animation 기본값은 true\n");
      out.write("    'openSbuMenu': function($item, animation) {\n");
      out.write("        if ($item != null) {\n");
      out.write("            $item.attr('data-extension', 'open');\n");
      out.write("            var $subMenu = $item.find('.sub');\n");
      out.write("\n");
      out.write("            if (!animation) {\n");
      out.write("                $subMenu.css({\n");
      out.write("                    'margin-top': 0\n");
      out.write("                });\n");
      out.write("            } else {\n");
      out.write("                $subMenu\n");
      out.write("                    .stop()\n");
      out.write("                    .animate({\n");
      out.write("                        'margin-top': 0\n");
      out.write("                    }, 300);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 아이콘 상태를 open(-) 상태로 만들기\n");
      out.write("            this.setIconState($item, 'open');\n");
      out.write("\n");
      out.write("            // 사용자 정의 open 이벤트 발생\n");
      out.write("            this.dispatchEvent($item, 'open');\n");
      out.write("\n");
      out.write("        }\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 서브 메뉴패널 닫기\n");
      out.write("    'closeSubMenu': function($item, animation) {\n");
      out.write("        if ($item != null) {\n");
      out.write("            $item.attr('data-extension', 'close');\n");
      out.write("            var $subMenu = $item.find('.sub'),\n");
      out.write("                subMenuPanelHeight = -$subMenu.outerHeight(true);\n");
      out.write("\n");
      out.write("            if (!animation) {\n");
      out.write("                $subMenu.css({\n");
      out.write("                    'margin-top': subMenuPanelHeight\n");
      out.write("                });\n");
      out.write("            } else {\n");
      out.write("                $subMenu\n");
      out.write("                    .stop()\n");
      out.write("                    .animate({\n");
      out.write("                        'margin-top': subMenuPanelHeight\n");
      out.write("                    }, 300);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // 아이콘 상태를 close(+) 상태로 만들기\n");
      out.write("            this.setIconState($item, 'close');\n");
      out.write("\n");
      out.write("            // 사용자 정의 close 이벤트 발생\n");
      out.write("            this.dispatchEvent($item, 'close');\n");
      out.write("\n");
      out.write("        }\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 서브 메뉴패널 열고 닫기\n");
      out.write("    '_toggleSubMenuPanel': function($item) {\n");
      out.write("        var extension = $item.attr('data-extension');\n");
      out.write("\n");
      out.write("        // 서브 메뉴패널이 없는 경우 실행하지 않는다.\n");
      out.write("        if (extension == 'empty') {\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // 서브 메뉴 패널이 있는 경우에 실행\n");
      out.write("        if (extension == 'open') {\n");
      out.write("            this.closeSubMenu($item, true);\n");
      out.write("        } else {\n");
      out.write("            this.openSbuMenu($item, true);\n");
      out.write("        }\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 인덱스 메뉴의 서브 메뉴패널 열기\n");
      out.write("    'openSubMenuAt': function(index, animation) {\n");
      out.write("        var $item = this.$mainMenuItems.eq(index);\n");
      out.write("        this.openSbuMenu($item, animation);\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 인덱스 메뉴의 서브 매뉴패널 닫기\n");
      out.write("    'closeSubMenuAt': function(index, animation) {\n");
      out.write("        var $item = this.$mainMenuItems.eq(index);\n");
      out.write("        this.closeSubMenu($item, animation);\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 서브 메뉴아이템 선택\n");
      out.write("    'selectSubMenuItem': function($item) {\n");
      out.write("        var $oldItem = this.$selectSubItem;\n");
      out.write("        if (this.$selectSubItem != null) {\n");
      out.write("            this.$selectSubItem.removeClass('select');\n");
      out.write("        }\n");
      out.write("        this.$selectSubItem = $item;\n");
      out.write("        this.$selectSubItem.addClass('select');\n");
      out.write("\n");
      out.write("        // 사용자 정의 select 이벤트 발생\n");
      out.write("        this._dispatchSelectEvent($oldItem, this.$selectSubItem);\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 인덱스를 활용한 메인 메뉴아이템과 서브 메뉴아이템 선택 기능\n");
      out.write("    'selectMenu': function(mainIndex, subIndex, animation) {\n");
      out.write("        // 메인 메뉴아이템\n");
      out.write("        var $item = this.$mainMenuItems.eq(mainIndex);\n");
      out.write("\n");
      out.write("        // 서브 메뉴아이템\n");
      out.write("        var $subMenuItem = $item.find('.sub li').eq(subIndex);\n");
      out.write("        // 서브 메뉴아이템이 존재하는 경우에만 처리\n");
      out.write("        if ($subMenuItem) {\n");
      out.write("            // 서브 메뉴패널 열기\n");
      out.write("            this.openSbuMenu($item, animation);\n");
      out.write("            // 서브 메뉴아이템 선택\n");
      out.write("            this.selectSubMenuItem($subMenuItem);\n");
      out.write("        }\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 사용자 정의 open, close 이벤트 발생 처리\n");
      out.write("    'dispatchEvent': function($item, eventName) {\n");
      out.write("        var customEvent = jQuery.Event(eventName);\n");
      out.write("        customEvent.$target = $item;\n");
      out.write("\n");
      out.write("        this.$accordionMenu.trigger(customEvent);\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    // 사용자 정의 select 이벤트 발생 처리\n");
      out.write("    '_dispatchSelectEvent': function($oldItem, $newItem) {\n");
      out.write("        var customEvent = jQuery.Event('selected');\n");
      out.write("        customEvent.$oldItem = $oldItem;\n");
      out.write("        customEvent.$newItem = $newItem;\n");
      out.write("\n");
      out.write("        this.$accordionMenu.trigger(customEvent);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("};\n");
      out.write("</script>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<ul class=\"acc-menu\" id=\"accordionMenu1\">\n");
      out.write(" \t<li>\n");
      out.write("        <div class=\"main-title\"><span class=\"folder\"></span><a href=\"/main.do\">HOME</a></div>\n");
      out.write("    </li>\n");
      out.write("    <li>\n");
      out.write("        <div class=\"main-title\"><span class=\"folder\"></span><a href=\"/about.do\">ABOUT</a></div>\n");
      out.write("    </li>\n");
      out.write("    <li data-extension=\"close\">\n");
      out.write("        <div class=\"main-title\"><span class=\"folder\"> </span><a href=\"/product.do\">PRODUCT</a></div>\n");
      out.write("        <ul class=\"sub\">\n");
      out.write("\t\t\t<li><a href=\"/product/top.do\">top</a></li>\n");
      out.write("\t\t\t<li><a href=\"/product/bottoms.do\">bottoms</a></li>\n");
      out.write("\t\t\t<li><a href=\"/product/accessory.do\">accessory</a></li>\n");
      out.write("        </ul>\n");
      out.write("    </li>\n");
      out.write("    <li data-extension=\"close\">\n");
      out.write("        <div class=\"main-title\"><span class=\"folder\"> </span><a href=\"/mypage.do\">MY PAGE</a> </div>\n");
      out.write("        <ul class=\"sub\">\n");
      out.write("          \t<li><a href=\"/mypage/myinfo.do\">myinfo</a></li>\n");
      out.write("\t\t\t<li><a href=\"/mypage/delivery.do\">delivery</a></li>\n");
      out.write("\t\t\t<li><a href=\"/mypage/counseling.do\">counseling</a></li>\n");
      out.write("        </ul>\n");
      out.write("    </li>\n");
      out.write("   \n");
      out.write("</ul>\n");
      out.write("</body>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
